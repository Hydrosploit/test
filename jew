 function Funcs:createCoinChams(part)
    if not highlightEnabled then return end
    local chams = Instance.new("BoxHandleAdornment")
    chams.Parent = part
    chams.Size = part.Size
    chams.Adornee = part
    chams.AlwaysOnTop = true
    chams.ZIndex = 5
    chams.Color3 = Color3.fromRGB(255, 215, 0) 
    chams.Transparency = 0.3 
end



function  Funcs:updateCoinChams()
    local CoinContainer = Workspace:FindFirstChild("CoinContainer", true)
    if CoinContainer then
        for _, coin in ipairs(CoinContainer:GetChildren()) do
            if coin:IsA("BasePart") then
                if highlightEnabled and not coin:FindFirstChildOfClass("BoxHandleAdornment") then
                    Funcs:createCoinChams(coin)
                end
            end
        end
    end
    for _, chams in ipairs(workspace:GetDescendants()) do
        if chams:IsA("BoxHandleAdornment") and not chams.Adornee then
            chams:Destroy()
        end
    end
    wait(0.1)
end

 function Funcs:startChamsLoop()
    if refreshLoopRunning then return end
    refreshLoopRunning = true
    coroutine.wrap(function()
        while refreshLoopRunning do
            Funcs:updateCoinChams()
        end
    end)()
end

 function Funcs:stopChamsLoop()
    refreshLoopRunning = false
    for _, chams in ipairs(workspace:GetDescendants()) do
        if chams:IsA("BoxHandleAdornment") then
            chams:Destroy()
        end
    end
end

 function Funcs:toggleCoinChams(state)
    highlightEnabled = state
    if highlightEnabled then
        Funcs:startChamsLoop()
    else
        Funcs:stopChamsLoop()
    end
end
